{
  "Description": "Container Fargate Service (fdp-1p5s1037g)",
  "Metadata" : {
    "Source":"https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/ECS/FargateLaunchType/services/private-subnet-public-service.yml"
  },
  "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "ECRImageURI": {
            "Type": "String",
            "Description" : "Arc Jupyter Public Docker Image URI",
            "Default": "triplai/arc-jupyter"
        },
        "TaskDefinitionName": {
            "Type": "String",
            "Description" : "This will set the Container, Task Definition, and Service name in Fargate.",
            "Default": "arcjupyter"
        },
        "ContainerPort": {
            "Type":"Number",
            "Description" : "port number to be used by Jupyter service.",
            "Default":8888
        },
        "ContainerSize": {
            "Type":"String",
            "Description" : "Size of compute for Jupyter Notebook - Small(2vCPU,8G MEM),Medium(2vCPU,16GB MEM),Large(4vCPU,30GB MEM)",
            "Default":"Small",
            "AllowedValues": ["Small","Medium","Large"]
        },
        "DataLakeS3Bucket":{
            "Type":"String",
            "Description" : "The S3 bucket that stores your data to be processed and queried. Change it to an existing bucket in your AWS account.",
            "Default": "arcdemo2020"
        }
  },
  "Mappings" : {
        "MapContainerSize" : {
            "Small" : {
                "cpu" : "2048" ,
                "mem" : "8192",
                "jvmmem": "8192"
            },
            "Medium" : {
                "cpu" : "2048",
                "mem" : "16384",
                "jvmmem": "15360"
            },
            "Large" : {
                "cpu" : "4096",
                "mem" : "30720",
                "jvmmem": "27648"
            }
        }
    },
  "Resources": {
    "S3Copy": {
          "Type": "Custom::CopyToS3",
          "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [ "CopyFilesToS3","Arn"]
              },
              "TargetBucketName": {"Ref": "DataLakeS3Bucket"},
              "SourceBucketName": "arcdemo2020",
              "SourcePrefix" :   "sc-code/ecs/app-code/"
          }
      },
      "CopyFilesToS3": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
              "Handler": "index.lambda_handler",
              "Role": {
                    "Fn::GetAtt": ["LambdaExecutionRole","Arn"]
              },
              "Code": {
                  "ZipFile": {
                      "Fn::Join": [
                          "\n",
                          [
                            "import json",
                            "import boto3",
                            "import cfnresponse",
                            "",
                            "print('Loading function')",
                            "s3 = boto3.client('s3')",
                            "",
                            "def lambda_handler(event, context):",
                            "    print('Received event: ' + json.dumps(event, indent=2))",
                            "    if event['RequestType'] == 'Create':",
                            "        # get the properties set in the CloudFormation resource",
                            "        properties = event['ResourceProperties']",
                            "        srcbucket = properties['SourceBucketName']",
                            "        targbucket = properties['TargetBucketName']",
                            "        srcprefix = properties['SourcePrefix']",
                            "",
                            "        try:",
                            "            for obj in s3.list_objects_v2(Bucket=srcbucket, Prefix=srcprefix)['Contents']:",
                            "                srckey = obj['Key']",
                            "                targetkey = '/'.join(srckey.split('/')[-3:])",
                            "",
                            "                copy_source = {",
                            "                      'Bucket': srcbucket,",
                            "                      'Key': srckey",
                            "                }",
                            "                print (targetkey)",
                            "                s3.copy(copy_source, targbucket, targetkey)",
                            "",
                            "        except Exception as e:",
                            "            print(e)",
                            "            return cfnresponse.send(event, context, cfnresponse.FAILED, {'Response': 'Failure'})",
                            "",
                            "    return cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Response': 'Success'})"
                            ]
                      ]
                  }
              },
              "Runtime": "python3.6",
              "Timeout": 60
          }
      },
      "LambdaExecutionRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [ "lambda.amazonaws.com" ]
                     },
                     "Action": [ "sts:AssumeRole" ]
                  }
               ]
            },
            "Path": "/",
            "ManagedPolicyArns":["arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"],
            "Policies": [
              {
                "PolicyName": "uploadtestdata",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "ListBothBuckets",
                            "Effect": "Allow",
                            "Action": [
                              "s3:ListBucket"
                            ],
                            "Resource": [
                              {"Fn::Sub" : "arn:aws:s3:::${DataLakeS3Bucket}"},
                              "arn:aws:s3:::arcdemo2020"
                            ]
                        },
                        {
                            "Sid": "DestinationBucketWriteAccess",
                            "Effect": "Allow",
                            "Action": "s3:PutObject",
                            "Resource": [
                              {"Fn::Sub" : "arn:aws:s3:::${DataLakeS3Bucket}/*"}
                            ]
                        },
                        {
                          "Sid": "SourceBucketReadAccess",
                          "Effect": "Allow",
                          "Action": "s3:GetObject",
                          "Resource": "arn:aws:s3:::arcdemo2020/sc-code/ecs/app-code/*"
                      }
                    ]
                 }
              }
          ]
        }
      },
      "S3ECSTaskRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Principal": {
                        "Service": [ "ecs-tasks.amazonaws.com" ]
                     },
                     "Action": [ "sts:AssumeRole" ]
                  }
               ]
            },
            "Path": "/",
            "Policies": [{
                  "PolicyName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "ecstask" ] ] },
                  "PolicyDocument": {
                     "Version": "2012-10-17",
                     "Statement": [
                        {
                           "Effect": "Allow",
                           "Action": [
                              "s3:ListBucket"
                           ],
                           "Resource": {
                              "Fn::Sub":"arn:aws:s3:::${DataLakeS3Bucket}"
                          },
                        },
                        {
                           "Effect": "Allow",
                           "Action": [
                              "s3:PutObject",
                              "s3:GetObject",
                              "s3:DeleteObject"
                           ],
                           "Resource": {
                              "Fn::Sub":"arn:aws:s3:::${DataLakeS3Bucket}/*"
                          }
                        }
                     ]
                  }
                }
            ]
          }
        },
        "taskdefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties" : {
                "ExecutionRoleArn": {"Fn::ImportValue": "ECSTaskExecutionRole"},
                "TaskRoleArn": {"Ref": "S3ECSTaskRole"},
                "RequiresCompatibilities": [
                  "FARGATE"
                ],
                "Memory":  { "Fn::FindInMap" : [ "MapContainerSize", { "Ref" : "ContainerSize" }, "mem"]},
                "Family": {"Ref":"TaskDefinitionName"},
                "NetworkMode": "awsvpc",
                "Cpu": { "Fn::FindInMap" : [ "MapContainerSize", { "Ref" : "ContainerSize" }, "cpu"]},
                "ContainerDefinitions" : [
                    {
                      "PortMappings": [
                        { "ContainerPort": {"Ref": "ContainerPort"} },
                        { "ContainerPort": 4040 }
                      ],
                      "LogConfiguration": {
                        "LogDriver": "awslogs",
                        "Options": {
                          "awslogs-group": {"Fn::ImportValue": "ECSJupyterLogGroup"},
                          "awslogs-region": {"Ref":"AWS::Region"},
                          "awslogs-stream-prefix": "ecs"
                        }
                      },
                      "Command": [
                          "jupyter",
                          "hub",
                          "--ip=0.0.0.0",
                          "--no-browser",
                          "--NotebookApp.password=''",
                          "--NotebookApp.token=''"
                     ],
                      "Environment": [
                        {
                          "Name": "AWS_REGION",
                          "Value": {"Ref":"AWS::Region"}
                        },
                        {
                          "Name": "JAVA_OPTS",
                          "Value": {
                                    "Fn::Join": [
                                     "", [
                                        "-Xmx",
                                        { "Fn::FindInMap" : [ "MapContainerSize", { "Ref" : "ContainerSize" }, "jvmmem"]},
                                        "M"
                                    ]
                                 ]
                                },
                        },
                        {
                          "Name": "ETL_CONF_DATALAKE_LOC",
                          "Value": {"Ref":"DataLakeS3Bucket"}
                        }
                      ],
                      "Image": {"Ref":"ECRImageURI"},
                      "Name": {"Ref":"TaskDefinitionName"}
                    }
                ]
            }
        },
      "ecsservice" : {
          "Type" : "AWS::ECS::Service",
          "DependsOn": ["PublicLoadBalancerListenerWeb"],
          "Properties" : {
            "TaskDefinition" : { "Ref" : "taskdefinition" },
            "DesiredCount" : 1,
            "LoadBalancers" : [
              {
              "TargetGroupArn" : { "Ref" : "TargetGroupWeb" },
              "ContainerPort" : { "Ref" : "ContainerPort" },
              "ContainerName": {"Ref":"TaskDefinitionName"}
              },
              {
              "TargetGroupArn" : { "Ref" : "TargetGroupSpark" },
              "ContainerPort" : 4040,
              "ContainerName": {"Ref":"TaskDefinitionName"}
              }
          ],
            "Cluster": { "Fn::ImportValue" : "FargateClusterName" },
            "LaunchType": "FARGATE",
            "ServiceName": {
               "Fn::Join": [ "-", [ "jupyter", { "Ref": "AWS::StackName" } ] ]
            },
            "NetworkConfiguration":{
                "AwsvpcConfiguration" : {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups":[{"Fn::ImportValue": "ECSFargateContainerSecurityGroup" }],
                  "Subnets": [
                    { "Fn::ImportValue": "ECSPrivateSubnetOne"},
                    { "Fn::ImportValue": "ECSPrivateSubnetTwo"}
                  ]
                }
            }
          }
      },
      "TargetGroupWeb": {
        "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties" : {
          "HealthCheckIntervalSeconds" : 60,
          "HealthCheckPath" : "/",
          "HealthCheckProtocol" : "HTTP",
          "HealthCheckTimeoutSeconds" : 5,
          "HealthyThresholdCount" : 5,
          "TargetType": "ip",
          "Matcher": {"HttpCode" : "302"},
          "Name": { "Fn::Sub": ["jupyter-${UniqueID}", {"UniqueID":{ "Fn::Select" : [ "3", { "Fn::Split": ["-", {"Ref": "AWS::StackName"}]}]}}]},
          "Port": { "Ref": "ContainerPort"},
          "Protocol": "HTTP",
          "UnhealthyThresholdCount" : 2,
          "VpcId": { "Fn::ImportValue" : "FargateClusterVPCId" }
        }
      },
      "TargetGroupSpark": {
        "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties" : {
          "HealthCheckPort":  { 
            "Fn::Sub": ["${port_to_string}", {"port_to_string":{ "Ref": "ContainerPort"}}]
          },
          "HealthCheckIntervalSeconds" : 60,
          "HealthCheckPath" : "/",
          "HealthCheckProtocol" : "HTTP",
          "HealthCheckTimeoutSeconds" : 5,
          "HealthyThresholdCount" : 5,
          "TargetType": "ip",
          "Matcher": {"HttpCode" : "302"},
          "Name": { "Fn::Sub": ["Spark-${UniqueID}", {"UniqueID":{ "Fn::Select" : [ "3", { "Fn::Split": ["-", {"Ref": "AWS::StackName"}]}]}}]},
          "Port": 4040,
          "Protocol": "HTTP",
          "UnhealthyThresholdCount" : 2,
          "VpcId": { "Fn::ImportValue" : "FargateClusterVPCId" }
        }
      },
      "PublicLoadBalancer":{
        "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties" : {
          "Scheme": "internet-facing",
          "LoadBalancerAttributes":[{
            "Key": "idle_timeout.timeout_seconds",
            "Value": "30"
          }],
          "Subnets":[
            {"Fn::ImportValue" :"ARCPublicSubnetOne"},
            {"Fn::ImportValue" :"ARCPublicSubnetTwo"}
          ],
          "SecurityGroups": [{"Fn::ImportValue" :"ECSPublicLoadBalancerSG"}]
        }
      },
      "PublicLoadBalancerListenerWeb": {
        "Type" : "AWS::ElasticLoadBalancingV2::Listener",
        "Properties" : {
          "DefaultActions" : [{ "TargetGroupArn" : {"Ref":"TargetGroupWeb"} ,"Type" : "forward" }],
          "LoadBalancerArn" : {"Ref": "PublicLoadBalancer"},
          "Port" : {"Ref": "ContainerPort"},
          "Protocol" : "HTTP"
        }
      },
      "PublicLoadBalancerListenerSpark": {
        "Type" : "AWS::ElasticLoadBalancingV2::Listener",
        "Properties" : {
          "DefaultActions" : [{ "TargetGroupArn" : {"Ref":"TargetGroupSpark"} ,"Type" : "forward" }],
          "LoadBalancerArn" : {"Ref": "PublicLoadBalancer"},
          "Port" : 4040,
          "Protocol" : "HTTP"
        }
      }
  },  
  "Outputs": {
      "NotebookURL":{
        "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": [ "PublicLoadBalancer","DNSName"]},":8888"]]},
        "Description": "Access your Jupyter notebook from this link"
      }    
  }
}